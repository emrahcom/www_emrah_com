#!/usr/bin/python
# -*- coding:utf-8 -*-

import re
import httplib


# Host adresi.
HOST = 'smsapi.ttmesaj.com'
# SMS gonderme sayfasi.
PAGE = '/SendNewMsg.asp'
# SMS gonderme sayfasi icin headers.
HEADERS = {'Content-Type':'application/soap+xml; charset=iso-8859-9'}
# SMS gonderirken kullanilacak olan XML verisi.
SOAP = """<?xml version='1.0' encoding='ISO-8859-9' ?>
<MainmsgBody>
<UserName>#username#</UserName>
<PassWord>#password#</PassWord>
<Origin>#label#</Origin>
<Version>#version#</Version>
<MsgCode>101</MsgCode>
<Messages>
    <Message>
        <Msgbody><![CDATA[#message#]]></Msgbody>
        <Number>#number#</Number>
        <SD></SD>
        <ED></ED>
    </Message>
</Messages>
</MainmsgBody>
"""
# SMS gonderdikten sonra islem sorunsuz yapildi ise, gelecek cevabin sablonu.
PATTERN_OK = re.compile("^\*OK\*\D*(\d+)", re.DOTALL)
# Debug yapilacak mi? Test ortami icin 1, gercek calisma ortami icin 0
DEBUG = 0



# -----------------------------------------------------------------------------
# SMS istemci sinifi.
class SmsClient():
    # Kullanici adi.
    username = ""
    # Kullanici parolasi.
    password = ""
    # Mesaj kaynagi ne olarak gozukecek.
    label = ""
    # Surum numarasi.
    version = ""
    # Kalan kontur adedi. Program baslarken bilinmiyor. Mesaj gonderilebildiyse
    # degeri gelecek.
    contour = -1



    # -------------------------------------------------------------------------
    # Nesne ilk olusturuldugunda calisacak bolum. Eger verildiyse ilk degerler
    # set ediliyor.
    def __init__(self, username=None, password=None, label=None, version=None):
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if label is not None:
            self.label = label
        if version is not None:
            self.version = version



    # -------------------------------------------------------------------------
    # SMS mesajini gonderen bolum.
    def sendSms(self, number, message):
        try:
            # Numarayi kontrol et, hatali ise devam etme.
            if not self.checkNumber(number):
                raise NameError('hatali telefon numarasi')
            # Mesaji kontrol et. Hatali ise devam etme.
            message = self.checkMessage(message)
            if message is None:
                raise NameError('hatali mesaj')

            # Sunucuya gonderilecek SOAP mesajini hazirla.
            req = SOAP
            req = req.replace('#username#', self.username)
            req = req.replace('#password#', self.password)
            req = req.replace('#label#', self.label)
            req = req.replace('#version#', self.version)
            req = req.replace('#number#', number)
            req = req.replace('#message#', message)

            # Sunucuya baglanip SMS mesajini gonder.
            cnn = httplib.HTTPConnection(HOST)
            cnn.request('POST', PAGE, req, HEADERS)
            res = cnn.getresponse().read()
            cnn.close()

            # Cevap sorunluysa islem basarisiz olmus demektir.
            if self.checkResponse(res) is None:
                raise NameError('gonderme isleminde hata (2)')
            else:
                result = True
        except Exception, err:
            if DEBUG:
                raise
            else:
                print(str(err))

            result = False

        return result



    # -------------------------------------------------------------------------
    # Telefon numarasinin dogrulugunu kontrol eder.
    def checkNumber(self, number):
        try:
            if not number.isdigit():
                raise NameError('telefon numarasinda izin verilmeyen karakter')
            if len(number) < 7 or len(number) > 15:
                raise NameError('telefon numarasi hatali')

            result = True
        except Exception, err:
            if DEBUG:
                raise
            else:
                print(str(err))

            result = False

        return result



    # -------------------------------------------------------------------------
    # Mesajin formatini kontrol eden bolum. Oncelikle bozuk yerleri duzeltmeye
    # calisir. Duzeltemezse None dondurur. SU an icin sadece Turkce
    # karakterleri replace ediyor.
    def checkMessage(self, message):
        try:
            message = message.replace('ğ', 'g')
            message = message.replace('Ğ', 'G')
            message = message.replace('ü', 'u')
            message = message.replace('Ü', 'U')
            message = message.replace('ş', 's')
            message = message.replace('Ş', 'S')
            message = message.replace('ı', 'i')
            message = message.replace('İ', 'I')
            message = message.replace('ö', 'o')
            message = message.replace('Ö', 'O')
            message = message.replace('ç', 'c')
            message = message.replace('Ç', 'C')

            result = message
        except Exception, err:
            if DEBUG:
                raise
            else:
                print(str(err))

            result = None

        return result



    # -------------------------------------------------------------------------
    # SMS gonderme islemi sonucu gelen cevabi cozumle. Islem yapildi ise kalan
    # kontur adedini dondurur. Yapilamadiysa None dondurur.
    def checkResponse(self, res):
        try:
            g = PATTERN_OK.search(res)
            if not g:
                raise NameError('gonderme isleminde hata (1)')

            self.contour = int(g.group(1))
            result = self.contour
        except Exception, err:
            if DEBUG:
                raise
            else:
                print(str(err))

            result = None

        return result



# -----------------------------------------------------------------------------
if __name__ == '__main__':
    s = SmsClient()
    s.username = "username"
    s.password = "parola"
    s.label = "username"
    s.version = "1.0"
    s.sendSms("5552223344", "Test mesaji")
    print(s.contour)

