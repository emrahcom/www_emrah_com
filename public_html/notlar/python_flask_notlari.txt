# -----------------------------------------------------------------------------
# FLASK NOTLARI
# -----------------------------------------------------------------------------
Notlar, Debian Jessie ve Python 3.x için hazırlanmıştır.



# -----------------------------------------------------------------------------
# FLASK KURULUM
# -----------------------------------------------------------------------------
Recommended paketlerin default olarak kurulmadığı varsayıldı. Nginx ve UWSGI
ile birlikte çalışacak şekilde yapılandırılıyor.

# Paketler
apt-get install python3-flask
apt-get install python3-pip
apt-get install uwsgi uwsgi-plugin-python3
apt-get install nginx-extras

# pip3
su -l emrah
pip3 install --user flask-wtf wtforms

# Flask proje klasörü
mkdir -p /home/emrah/myproject/{templates,static}

# /home/emrah/myproject/myapp.ini
[uwsgi]
plugins = python
uid = emrah
gid = emrah
master = true
processes = 8
enable-threads = true
max-requests = 100
harakiri = 300
post-buffering = 8192
vacuum = true
socket = 127.0.0.1:8000
callable = app
wsgi-file = /home/emrah/myproject/myapp.py
chdir = /home/emrah/myproject/

# /home/emrah/myproject/myapp.py
from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello World!'

if __name__ == '__main__':
    app.debug = True
    app.run()

# test run
su -l emrah
python3 /home/emrah/myproject/myapp.py

<ctrl>+C

# UWSGI link ve restart
ln -s /home/emrah/myproject/myapp.ini /etc/uwsgi/apps-enabled/
systemctl restart uwsgi

# /etc/nginx/sites-available/mysite.conf
server {
        listen 80;
        server_name _;
        access_log /var/log/nginx/access.mysite.log;
        error_log /var/log/nginx/error.mysite.log;

        root /home/emrah/myproject/static;

        location / {
                try_files $uri @myproject;
        }

        location @myproject {
                include uwsgi_params;
                uwsgi_pass 127.0.0.1:8000;
        }
}

# Nginx link ve restart
ln -s ../sites-available/mysite.conf /etc/nginx/sites-enabled/
rm /etc/nginx/sites-enabled/default
systemctl restart nginx

# Test
curl http://127.0.0.1/

# UWSGI ile debug
Browserdan hata mesajlarını görebilmek için ana blok içinde:

app = Flask(__name__)

from werkzeug.debug import DebuggedApplication
app.wsgi_app = DebuggedApplication(app.wsgi_app, True)
app.debug = True



# -----------------------------------------------------------------------------
# STRUCTURE
# -----------------------------------------------------------------------------
myproject
│
├── app
│   ├── __init__.py
│   ├── models.py
│   ├── static
│   │   ├── logo.png
│   │   └── style.css
│   ├── templates
│   │   ├── bp1
│   │   │   ├── layout.html
│   │   │   ├── page1.html
│   │   │   └── page2.html
│   │   ├── bp2
│   │   │   ├── layout.html
│   │   │   ├── page3.html
│   │   │   └── page4.html
│   │   └── layout.html
│   └── views
│       ├── bp1.py
│       ├── bp2.py
│       └── __init__.py
└── run.py

# myproject/app/view/__init__.py
touch myproject/app/view/__init__.py

# myproject/app/views/bp1.py
from flask import Blueprint, render_template
bp1 = Blueprint('bp1', __name__)

@bp1.route('/page1')
def page1():
    return render_template('bp1/page1.html')

# myproject/app/__init__.py
from flask import Flask
from .views.bp1 import bp1

app = Flask(__name__)
app.register_blueprint(bp1, url_prefix='/bp1')

# myproject/run.py
from app import app

if __name__ == '__main__':
    app.debug = True
    app.run()



# -----------------------------------------------------------------------------
# FLASK-SQLALCHEMY
# -----------------------------------------------------------------------------
Flask-SQLAlchemy, tamamen SQLAlchemy gibi davranmamakta. Özellikle Flask
kullanılırken doğrudan SQLAlchemy kullanmak yerine Flask-SQLAlchemy kullanmanın
bazı avantajları var. Örneğin session yönetimi gibi...

# Paketler (postgresql varsa)
apt-get install postgresql postgresql-contrib

# Paketler
apt-get install python3-flask-sqlalchemy
apt-get install python3-psycopg2
apt-get install python3-mysql.connector



# -----------------------------------------------------------------------------
# KAYNAKLAR
# -----------------------------------------------------------------------------

# Flask
http://flask.pocoo.org/
http://flask.pocoo.org/docs/0.10/
http://www.fullstackpython.com/flask.html
# Structure
https://www.exploreflask.com/blueprints.html
https://www.digitalocean.com/community/tutorials/how-to-structure-large-flask-applications
http://mattupstate.com/python/2013/06/26/how-i-structure-my-flask-applications.html
http://fewstreet.com/2015/01/16/flask-blueprint-templates.html
# Flask - SQLAlchemy
http://flask-sqlalchemy.pocoo.org/2.1/
# UWSGI
http://uwsgi-docs.readthedocs.org/en/latest/
http://flask.pocoo.org/docs/0.10/deploying/uwsgi/
