#!/usr/bin/python
# -*- coding:utf8 -*-

#
# Siemens TC65 Cellular Engine kullanarak SMS alan ve
# okunan SMS mesajlarini depodan silen program
#

import serial
import time
import re
import math

DEBUG                   = 0                             # program test modu icin 1, normal calisma icin 0
SERI_PORT               = '/dev/ttyS0'                  # kullanilacak seri port
SERI_BAUDRATE           = 115200                        # seri portun hizi
SERI_BYTESIZE           = 8                             # seri port byet uzunlugu
SERI_PARITY             = 'N'                           # seri port kontrol karakter tipi
SERI_STOPBITS           = 1                             # seri port paketler arasi duraklama biti sayisi
SERI_TIMEOUT            = 0.50                          # seri port zaman asimi suresi
MAX_SMS_ADEDI           = 35                            # cihazin maksimum SMS mesaji depolama kapasitesi

SABLON_SMS_READ         = re.compile('AT\+CMGR=([0-9]+).*\+CMGR: (.+?)\n(.+?)\n', re.DOTALL)
SABLON_SMS_NO           = re.compile('AT\+CMGR=([0-9]+)')
SABLON_SMS_BASLIK       = re.compile('\+CMGR: ".+?"[^"]*"(.+?)"[^"]*"(.+?)"$')
SABLON_MESAJ_HEX        = re.compile('^[0-9abcdefABCDEF]+$')




# -----------------------------------------------------------------------
# cihazi fabrika ayarlarina getiren bolum
def cihaz_reset(s):
    try:
        s.write('AT&F0\r')
        buffer = s.read(1024)
        buffer = buffer.splitlines()

        # program test modunda ise okudugu veriyi ekrana yazar
        if DEBUG: print(buffer)

        # cevap olarak OK donmediyse hata olusmus demektir
        if buffer[2] != 'OK': raise RuntimeError

        return True
    except:
        return False



# -----------------------------------------------------------------------
# SMS islemlerini text modda yapmak icin cihazi text moduna geciren bolum
def text_mod(s):
    try:
        s.write('AT+CMGF=1\r')
        buffer = s.read(1024)
        buffer = buffer.splitlines()

        # program test modunda ise okudugu veriyi ekrana yazar
        if DEBUG: print(buffer)

        # cevap olarak OK donmediyse hata olusmus demektir
        if buffer[2] != 'OK': raise RuntimeError

        return True
    except:
        return False



# -----------------------------------------------------------------------
# SMS kaydini depodan silen bolum
def sms_sil(s, sms_no):
    try:
        s.write('AT+CMGD=%d\r' % sms_no)
        buffer = s.read(1024)
        buffer = buffer.splitlines()

        # program test modunda ise okudugu veriyi ekrana yazar
        if DEBUG: print(buffer)

        # cevap olarak OK donmediyse hata olusmus demektir
        if buffer[2] != 'OK': raise RuntimeError
        return True
    except:
        return False



# -----------------------------------------------------------------------
# SMS numarasini tesbit eden bolum
def sms_no_al(str):
    try:
        g = SABLON_SMS_NO.search(str)
        if not g: raise RuntimeError
        sms_no = int(g.group(1))
        if DEBUG: print('SMS NO: %d' % sms_no)

        return sms_no
    except:
        return None



# -----------------------------------------------------------------------
# SMS baslik bilgilerini yorumlayan bolum
def sms_baslik_yorumla(str):
    try:
        g = SABLON_SMS_BASLIK.search(str)
        if not g: raise RuntimeError
        telno = g.group(1).strip()
        tarih = g.group(2).strip()

        # program test modunda ise tesbit edilen verileri ekrana yazar
        if DEBUG: print('BASLIK DETAY: %s %s' % (telno, tarih))

        return (telno, tarih)
    except:
        return ('', '')




# -----------------------------------------------------------------------
# SMS mesajinin telefon no, zaman gibi bilgilerini iceren baslik kismini alan bolum
def sms_baslik_al(s, sms_no,str):
    try:
        # bos kayit ise
        if str[0:11] == '+CMGR: 0,,0':
            if DEBUG: print('BASLIK: bos')
            raise RuntimeError

        # daha onceden okunmus kayit ise
        elif str[0:17] == '+CMGR: "REC READ"':
            if DEBUG: print('BASLIK: okunmus')
            sms_sil(s, sms_no)
            raise RuntimeError

        # daha onceden okunmamis kayit ise
        elif str[0:19] == '+CMGR: "REC UNREAD"':
            if DEBUG: print('BASLIK: okunmamis')
            (telno, tarih) = sms_baslik_yorumla(str)

        # gonderilmis mesaj ise
        elif str[0:17] == '+CMGR: "STO SENT"':
            if DEBUG: print('BASLIK: gonderilmis')
            sms_sil(s, sms_no)
            raise RuntimeError

        # gonderilmeyi bekleyen mesaj ise
        elif str[0:19] == '+CMGR: "STO UNSENT"':
            if DEBUG: print('BASLIK: gonderilecek')
            raise RuntimeError

        # tipi tesbit edilemeyen mesaj ise
        else:
            if DEBUG: print('BASLIK: tesbit edilemedi')
            raise RuntimeError

        return (True, telno, tarih)
    except:
        return (None, None, None)



# -----------------------------------------------------------------------
# SMS mesajinin, mesaj kismini alan bolum
def sms_mesaj_al(str):
    try:
        # mesaj bos ise hata var demektir
        str = str.strip()
        boy = len(str)
        #if boy == 0: raise RuntimeError

        # mesaj hex veri mi iceriyor?
        # sadece hex karakterleri varsa ve mesaj uzunlugu 4'un katiysa ve cok sayida 0 varsa muhtemelen hex
        if SABLON_MESAJ_HEX.search(str) and  math.fmod(boy, 4) == 0 and str.count('0') > (boy/3.0):
            mesaj = u''
            while True:
                mesaj += u'%c' % int(str[0:4], 16)
                str = str[4:]
                if not len(str): break

            if DEBUG: print('MESAJ UTF-8: %s' % mesaj)
            return mesaj
        else:
            if DEBUG: print('MESAJ ASCII: %s' % str)
            return str
    except:
        return None



# -----------------------------------------------------------------------
# SMS mesajlarini alan bolum
def sms_al(s, adet):
    try:
        for i in range(1,adet+1):
            s.write('AT+CMGR=%d\r' % i)
            buffer = s.read(2048)
            # program test modunda ise okudugu veriyi ekrana yazar
            if DEBUG: print(buffer)

            buffer = buffer.splitlines()
            # program test modunda ise okudugu veriyi ekrana yazar
            if DEBUG: print(buffer)

            # OK gelmediyse bir sonraki kayda gec, demek bu kaydi okurken hata olusmus
            if buffer[-1] != 'OK': continue

            # SMS kayit numarasini al
            # SMS kayit numarasi yoksa bu kayitta hata var demektir, bir sonraki kayitla devam et
            sms_no = sms_no_al(buffer[0])
            if not sms_no: continue

            # SMS baslik bilgilerini al
            # okunmamis mesaj degilse bu kayitla bir isimiz yok, bir sonraki kayitla devam et
            (sms_sonuc, sms_telno, sms_tarih) = sms_baslik_al(s, sms_no, buffer[2])
            if not sms_sonuc: continue

            # SMS mesajini al
            sms_mesaj = ''
            for b in buffer[3:-2]: sms_mesaj += '%s\n' % b
            sms_mesaj = sms_mesaj_al(sms_mesaj)

            # ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
            # elde edilen SMS mesajlari burada
            print sms_no, sms_telno, sms_tarih, sms_mesaj

            if DEBUG: print('--------------------')

        return True
    except:
        return False



# -----------------------------------------------------------------------
# programin ana bolumu

# seri portu ayarla
seri                    = serial.Serial()
seri.port               = SERI_PORT
seri.baudrate           = SERI_BAUDRATE
seri.bytesize           = SERI_BYTESIZE
seri.parity             = SERI_PARITY
seri.stopbits           = SERI_STOPBITS
seri.timeout            = SERI_TIMEOUT
seri.open()

# cihazi fabrika ayarlarina getir
cihaz_reset(seri)

# text moduna gec
text_mod(seri)

# SMS mesajlarini al
sms_al(seri, MAX_SMS_ADEDI)

# seri portu kapat
seri.close()
